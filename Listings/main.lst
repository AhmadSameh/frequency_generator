C51 COMPILER V9.60.7.0   MAIN                                                              04/26/2023 06:43:35 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\..\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg51.h>
   2          
   3          #define MODE_1 1
   4          #define MODE_2 2
   5          #define TIMER_1 1
   6          #define TIMER_2 2
   7          
   8          #define Freq 100
   9          //#define ONE_TICK_TIME   0.001085
  10          #define ONE_TICK_TIME   0.000545
  11          #define MAX_NUM_OF_TICKS 65535
  12          
  13          typedef unsigned char u8;
  14          typedef unsigned short int u16;
  15          typedef unsigned long int u32;
  16          typedef signed char s8;
  17          typedef signed short int s16;
  18          typedef signed long int s32;
  19          typedef float f32;
  20          typedef double f64;
  21          
  22          sbit C1 = P1^4;
  23          sbit C2 = P1^5;
  24          sbit C3 = P1^6;
  25          sbit C4 = P1^7;
  26          
  27          sbit S4 = P0^0;
  28          sbit S1 = P0^1;
  29          sbit S2 = P0^2;
  30          sbit S3 = P0^3;
  31          
  32          sbit freq_pin = P3^7;
  33          
  34          u8 numOfOverFlows;
  35          u8 TIMER_MODE;
  36          u8 TH1_Val,TL1_Val;
  37          u16 remainder_flow;
  38          u32 numOfTicks;
  39          u16 freq;
  40          u8 currentMode = MODE_1;
  41          u8 Num[4] = {0, 0, 0, 0};
  42          
  43          //void Timer_Init();
  44          //void generateFrequency();
  45          void timer_delay(f32 millis);
  46          //void tick_delay();
  47          //void delay(u16 millis);
  48          //void Ext_Init();
  49          //void Display7Segement();
  50          //void DisplayNum(u8 n);
  51          s8 KeyPadGetPressed(void);
  52          u8 arr[10]={0x81,0xBD,0xA2,0xA8,0x9C,0xC8,0xC0,0xAD,0x80,0x88};
  53          
  54          void main(){
C51 COMPILER V9.60.7.0   MAIN                                                              04/26/2023 06:43:35 PAGE 2   

  55   1        
  56   1        u8 num;                       
  57   1        //Ext_Init();
  58   1        //Enable global and external
  59   1        IE = 0x89;
  60   1        //Interrupt on High to Low transition
  61   1        IT0 = 1;
  62   1        P0 = 0;
  63   1        PT1 = 1;
  64   1        //Timer_Init();
  65   1        TMOD |= 0x01;
  66   1        while(1){
  67   2          //GET Num from Keypad
  68   2          num = KeyPadGetPressed();
  69   2          if(num != -1){
  70   3            //little delay
  71   3            timer_delay(200);
  72   3            //shift Numbers
  73   3            Num[3] = Num[2];
  74   3            Num[2] = Num[1];
  75   3            Num[1] = Num[0];
  76   3            Num[0] = num;
  77   3          }
  78   2          //display num
  79   2          P2 = arr[Num[0]];
  80   2        S4 = 0;
  81   2        S3 = 1;
  82   2        S2 = 1;
  83   2        S1 = 1;
  84   2        timer_delay(20);
  85   2        P2 = arr[Num[1]];
  86   2        S4 = 1;
  87   2        S3 = 0;
  88   2        S2 = 1;
  89   2        S1 = 1;
  90   2        timer_delay(20);
  91   2        P2 = arr[Num[2]];
  92   2        S4 = 1;
  93   2        S3 = 1;
  94   2        S2 = 0;
  95   2        S1 = 1;
  96   2        timer_delay(20);
  97   2        P2 = arr[Num[3]];
  98   2        S4 = 1;
  99   2        S3 = 1;
 100   2        S2 = 1;
 101   2        S1 = 0;
 102   2        timer_delay(20);
 103   2      
 104   2        }
 105   1      }
 106          
 107          s8 KeyPadGetPressed(void){
 108   1        u8 row_values[]={0xfe,0xfd,0xfb,0xf7};
 109   1        u8 i;
 110   1          for(i = 0; i < 4 ;i++){
 111   2            P1 = row_values[i];
 112   2            C1 =1;
 113   2            C2 =1;
 114   2            C3 =1;
 115   2            C4 =1;
 116   2            if( !C1 )
C51 COMPILER V9.60.7.0   MAIN                                                              04/26/2023 06:43:35 PAGE 3   

 117   2              return 1+3*i;
 118   2            if( !C2 ){
 119   3              if ( i != 3)
 120   3                return 2+3*i;
 121   3              else
 122   3                return 0;
 123   3            }
 124   2            if( !C3 )
 125   2              return 3+3*i;
 126   2          }
 127   1          return -1;
 128   1      }
 129          
 130          //void Display7Segement(){
 131          //  P2 = arr[Num[0]];
 132          //  S4 = 0;
 133          //  S3 = 1;
 134          //  S2 = 1;
 135          //  S1 = 1;
 136          //  timer_delay(20);
 137          //  P2 = arr[Num[1]];
 138          //  S4 = 1;
 139          //  S3 = 0;
 140          //  S2 = 1;
 141          //  S1 = 1;
 142          //  timer_delay(20);
 143          //  P2 = arr[Num[2]];
 144          //  S4 = 1;
 145          //  S3 = 1;
 146          //  S2 = 0;
 147          //  S1 = 1;
 148          //  timer_delay(20);
 149          //  P2 = arr[Num[3]];
 150          //  S4 = 1;
 151          //  S3 = 1;
 152          //  S2 = 1;
 153          //  S1 = 0;
 154          //  timer_delay(20);
 155          //}
 156          
 157          //void DisplayNum(u8 n){
 158          //  if(n>= 0 && n<=9)
 159          //    P2 = arr[n];
 160          //}
 161          
 162          
 163          //void Timer_Init(){
 164          //  // timer 0: mode 1 = 0x01 - mode 2 = 0x02
 165          //  // timer 1: mode 1 = 0x10 - mode 2 = 0x20
 166          //  TMOD |= 0x01;
 167          //}
 168          
 169          void timer_delay(f32 millis){
 170   1      //    tick_delay();
 171   1          u16 i;
 172   1          numOfTicks = (millis / ONE_TICK_TIME);
 173   1        if(numOfTicks > MAX_NUM_OF_TICKS){
 174   2            //millis is more than the overflow time
 175   2            //get number of overflow iterations
 176   2            numOfOverFlows = numOfTicks / MAX_NUM_OF_TICKS;
 177   2            for(i=0; i< numOfOverFlows;i++){
 178   3                TH0 = 0x00;
C51 COMPILER V9.60.7.0   MAIN                                                              04/26/2023 06:43:35 PAGE 4   

 179   3                TL0 = 0x00;
 180   3                TR0 = 1;
 181   3                while(!TF0);
 182   3                TF0 = 0;
 183   3                TR0 = 0;
 184   3            }
 185   2      //      if(numOfTicks%MAX_NUM_OF_TICKS!=0){
 186   2      //        //set the remainder in the timer counter
 187   2      //        remainder_flow = MAX_NUM_OF_TICKS - (numOfTicks - (numOfOverFlows*MAX_NUM_OF_TICKS));
 188   2      //        TH0 = (remainder_flow & 0xFF00) >> 8;
 189   2      //        TL0 = remainder_flow & 0x00FF;
 190   2      //        TR0 = 1;
 191   2      //        while(!TF0);
 192   2      //        TF0 = 0;
 193   2      //        TR0 = 0;
 194   2      //      }
 195   2          }
 196   1          else if(numOfTicks < MAX_NUM_OF_TICKS){
 197   2            //millis is less than the overflow time
 198   2            remainder_flow = (MAX_NUM_OF_TICKS - numOfTicks);
 199   2            TH0 = (remainder_flow & 0xFF00) >> 8;
 200   2            TL0 = remainder_flow & 0x00FF;
 201   2            TR0 = 1;
 202   2            while(!TF0);
 203   2            TF0 = 0;
 204   2            TR0 = 0;
 205   2          }
 206   1          else{
 207   2            //millis is the same as the overflow time
 208   2            TH0 = 0x00;
 209   2            TL0 = 0x00;
 210   2            TR0 = 1;
 211   2            while(!TF0);
 212   2            TF0 = 0;
 213   2            TR0 = 0;      
 214   2          }
 215   1      
 216   1      }
 217          
 218          //void Ext_Init(){
 219          //  //Enable global and external
 220          //  IE = 0x89;
 221          //  //Interrupt on High to Low transition
 222          //  IT0 = 1;
 223          //}
 224          
 225          void ext_int(void) interrupt 0 {
 226   1          if(currentMode == MODE_1){
 227   2            //timer_delay(200);
 228   2            //generate freq
 229   2            freq = Num[3]*1000 + Num[2]*100 + Num[1]*10 + Num[0];
 230   2            //enable timer
 231   2            //ET0 = 1;
 232   2            // freq = 500;
 233   2            //generate num of ticks
 234   2            //u8 time = (f32)(1 / (4000 * 2));
 235   2            
 236   2            numOfTicks = (500/(f32)(freq*ONE_TICK_TIME));
 237   2            //remainder_flow = 0xFFFE;
 238   2            if(numOfTicks > 255){
 239   3              remainder_flow = (MAX_NUM_OF_TICKS - numOfTicks);
 240   3              TIMER_MODE = TIMER_1;
C51 COMPILER V9.60.7.0   MAIN                                                              04/26/2023 06:43:35 PAGE 5   

 241   3              //setup as timer 1
 242   3              TMOD &= 0xF0;
 243   3              TMOD = 0x10;
 244   3              //load TH0 and TL0 with values
 245   3              TH1_Val = (remainder_flow & 0xFF00) >> 8;
 246   3              TL1_Val = (remainder_flow & 0x00FF);
 247   3              TH1 = TH1_Val;
 248   3              TL1 = TL1_Val;
 249   3              
 250   3            }
 251   2            else{
 252   3              TIMER_MODE = TIMER_2;
 253   3              //setup as timer 2
 254   3              //TMOD &= 0xF0;
 255   3              TMOD |= 0x20;
 256   3              //load TH0 and THL with same value
 257   3              if(freq > 7000)
 258   3                TH1 = TL1 = (0xFF - numOfTicks + 10);
 259   3              else if(freq > 3000 && freq < 7000)
 260   3                TH1 = TL1 = (0xFF - numOfTicks + 7);
 261   3              else
 262   3                TH1 = TL1 = (0xFF - numOfTicks);
 263   3            }
 264   2            //start timer
 265   2            TR1 = 1;
 266   2            ET1 = 1;
 267   2            //switch mode
 268   2            currentMode = MODE_2;
 269   2          }
 270   1          else if(currentMode == MODE_2){
 271   2            //timer_delay(200);
 272   2            //disable timer intt
 273   2            ET1 = 1;
 274   2            //close timer
 275   2            TR1 = 1;
 276   2            //switch mode
 277   2            currentMode = MODE_1;
 278   2          }
 279   1      }
 280          
 281          void timer_int(void) interrupt 3{
 282   1        EA = 0;
 283   1        ET1 = 0;
 284   1        TR1 = 0;
 285   1        //toggle pin
 286   1        freq_pin ^= 1;
 287   1        if(TIMER_MODE == TIMER_1){
 288   2            TH1 = TH1_Val;
 289   2            TL1 = TL1_Val;
 290   2            TR1 = 1;
 291   2        }
 292   1        else
 293   1            TR1 = 1;  
 294   1        ET1 = 1;
 295   1        EA = 1;
 296   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    707    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              04/26/2023 06:43:35 PAGE 6   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
